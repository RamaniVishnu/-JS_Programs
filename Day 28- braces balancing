1)
a) order matters, the code works if matches is in this format
let a = '[{]}{}';
function isBracesBalanced(input) {
    const stack = [];
    const openBraces = ['(', '{', '['];
    const matches = {
        ')': '(',
        '}': '{',
        ']': '['
    };
    for (let char of input) {
        if (openBraces.includes(char)) {
            stack.push(char);
        } else if (char in matches) {
            if (stack.length === 0 || stack.pop() !== matches[char]) {
                return false;
            }
        }
    }
    return stack.length === 0;
}
console.log(isBracesBalanced(a));



2)no matter of the order
function hasEqualOpenCloseCounts(input) {
  const counts = {
    '(': 0,
    ')': 0,
    '{': 0,
    '}': 0,
    '[': 0,
    ']': 0
  };

  for (let char of input) {
    if (counts.hasOwnProperty(char)) {
      counts[char]++;
    }
  }

  return (
    counts['('] === counts[')'] &&
    counts['{'] === counts['}'] &&
    counts['['] === counts[']']
  );
}
const test1 = "[{]}{}"; // true (matching counts)
const test2 = "[{{}]";  // false (mismatched counts)
console.log(hasEqualOpenCloseCounts(test1)); // true
console.log(hasEqualOpenCloseCounts(test2)); // false

