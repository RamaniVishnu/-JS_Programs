1)
a) order matters, the code works if matches is in this format
function isBalanced(input) {
  const stack = [];
  const open = ['(', '{', '['];
  const close = [')', '}', ']'];
  const matches = {
    ')': '(',
    '}': '{',
    ']': '[',
  };
  for (let char of input) {
      console.log('charrrrrrrr',char)
    if (open.includes(char)) {
      stack.push(char);
    } else if (close.includes(char)) {
      if (stack.pop() !== matches[char]) {
          console.log('else if in',char)
        return false;
      }
    }
  }
  return stack.length === 0;
}
const test = "[{]}{}";
console.log(isBalanced(test)); // false

b) order matters, the code works if matches is in this format
let a = '[{]}{}';
function bracesBalance(a) {
    const openB = ['{', '[', '('];
    const closeB = ['}', ']', ')'];
    const stack = [];
    const matches = {
        '{': '}',
        '[': ']',
        '(': ')'
    };

    for (let elem of a) {
        if (openB.includes(elem)) {
            stack.push(elem);
        } else if (closeB.includes(elem)) {
            const lastOpen = stack.pop();
            if (matches[lastOpen] !== elem) {
                return false;
            }
        }
    }

    return stack.length === 0;
}

console.log(bracesBalance(a)); //true



2)no matter of the order
function hasEqualOpenCloseCounts(input) {
  const counts = {
    '(': 0,
    ')': 0,
    '{': 0,
    '}': 0,
    '[': 0,
    ']': 0
  };

  for (let char of input) {
    if (counts.hasOwnProperty(char)) {
      counts[char]++;
    }
  }

  return (
    counts['('] === counts[')'] &&
    counts['{'] === counts['}'] &&
    counts['['] === counts[']']
  );
}

// Example usage
const test1 = "[{]}{}"; // true (matching counts)
const test2 = "[{{}]";  // false (mismatched counts)
console.log(hasEqualOpenCloseCounts(test1)); // true
console.log(hasEqualOpenCloseCounts(test2)); // false

