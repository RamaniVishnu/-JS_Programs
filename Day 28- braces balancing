1)
a) order matters, the code works if matches is in this format
const test = "[{}]{}";
function bracesBalance(str){
    let openB =['(',"{","["];
    let matches ={
        '{':'}',
        '[':']',
        '(':')'
    }
    let stack=[];
   for(let elem of str){
        if(openB.includes(elem)){
            stack.push(elem);
        }else{
            if(matches[stack.pop()]!==elem ){
                return false;
            }
        }
   }   
    return stack.length === 0;
}
console.log(bracesBalance(test))




2)no matter of the order
function hasEqualOpenCloseCounts(input) {
  const counts = {
    '(': 0,
    ')': 0,
    '{': 0,
    '}': 0,
    '[': 0,
    ']': 0
  };

  for (let char of input) {
    if (counts.hasOwnProperty(char)) {
      counts[char]++;
    }
  }

  return (
    counts['('] === counts[')'] &&
    counts['{'] === counts['}'] &&
    counts['['] === counts[']']
  );
}
const test1 = "[{]}{}"; // true (matching counts)
const test2 = "[{{}]";  // false (mismatched counts)
console.log(hasEqualOpenCloseCounts(test1)); // true
console.log(hasEqualOpenCloseCounts(test2)); // false

